//Java Strings Introduction
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
        String B=sc.next();
        
        
        System.out.println(A.length() + B.length());
   
        if(A.compareTo(B) > 0){
        System.out.println("Yes");
         } else {
        System.out.println("No");
         } 

    A = (A.substring(0,1)).toUpperCase() + A.substring(1);       
    B = (B.substring(0,1)).toUpperCase() + B.substring(1);
    System.out.println(A + " " + B);
        
    }
}


---------------------------------------------------------------------

//Java Substring
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String S = in.next();
        int start = in.nextInt();
        int end = in.nextInt();
        
    System.out.println(S.substring(start, end));
    }
}



---------------------------------------------------------------------

//Java Substring Comparisons
import java.util.Scanner;

public class Solution {

    public static String getSmallestAndLargest(String s, int k) {
        String smallest = s.substring(0, k);
          String largest = s.substring(0, k);
    
    for (int i = 0; i <= s.length() - k; i++) {
        String substring = s.substring(i, i + k);
        if (substring.compareTo(smallest) < 0) {
            smallest = substring;
        }
        if (substring.compareTo(largest) > 0) {
            largest = substring;
        }
    }
    return smallest + "\n" + largest;
    }


    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}

---------------------------------------------------------------------


//Java String Reverse
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        
        Scanner sc=new Scanner(System.in);
        String A=sc.next();
       
       for (int i = 0; i<A.length(); i++){
           if(A.charAt(A.length() -i -1) == A.charAt(i)){
            System.out.println("Yes");
            break;
           }else {
               System.out.println("No");
                break;
           }
       }
        
    }
}


---------------------------------------------------------------------

//Java Anagrams
import java.util.Scanner;

public class Solution {

    static boolean isAnagram(String a, String b) {
        
        char[] arr1 = a.toLowerCase().trim().toCharArray();
        char[] arr2 = b.toLowerCase().trim().toCharArray();
        
        for (int i = 0; i < arr1.length; i++) {
        for (int j = i + 1; j < arr1.length; j++) {
            char temp = 0;
            if (arr1[i] > arr1[j]) {
                temp = arr1[i];
                arr1[i] = arr1[j];
                arr1[j] = temp;
            }
        }
    }
    
     for (int i = 0; i < arr2.length; i++) {
        for (int j = i + 1; j < arr2.length; j++) {
            char temp = 0;
            if (arr2[i] > arr2[j]) {
                temp = arr2[i];
                arr2[i] = arr2[j];
                arr2[j] = temp;
            }
        }
    }
    
    String a1 = new String(arr1);
    String a2 = new String(arr2);
    
    if (a1.equals(a2)){
        return true;
    }

        return false;
    }

  public static void main(String[] args) {
    
        Scanner scan = new Scanner(System.in);
        String a = scan.next();
        String b = scan.next();
        scan.close();
        boolean ret = isAnagram(a, b);
        System.out.println( (ret) ? "Anagrams" : "Not Anagrams" );
    }
}

---------------------------------------------------------------------


//Java String Tokens
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        String[] arr;
        
        s = s.trim();
        
        if (s.length() == 0){
             System.out.println(0);
        }else{ 
            arr = s.replaceAll("['!?,._@ ]+", " ").split("\\s+"); 
            System.out.println(arr.length); 
            for (int i = 0; i < arr.length; i++) {
                System.out.println(arr[i]); 
            }
            
         }

             scan.close();
    }
   
 }
 
 
 ---------------------------------------------------------------------

//Pattern Syntax Checker
import java.util.Scanner;
import java.util.regex.*;

public class Solution
{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        int testCases = Integer.parseInt(in.nextLine());
        while(testCases>0 && in.hasNext()){
            String pattern = in.nextLine();
            try{
                Pattern p = Pattern.compile(pattern);
                System.out.println("Valid");
            }catch (Exception e){
                System.out.println("Invalid");
            }
            
        }
    }
}


---------------------------------------------------------------------

//Java Regex

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner;

class Solution{

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        while(in.hasNext()){
            String IP = in.next();
            System.out.println(IP.matches(new MyRegex().pattern));
        }

    }
}

class MyRegex {

String regex = "(([01]?\\d{1,2})|(2[0-4]\\d)|(25[0-5]))";
String pattern = String.format("%s.%s.%s.%s", regex, regex, regex, regex);

}


---------------------------------------------------------------------

//Java Regex 2 - Duplicate Words
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DuplicateWords {

    public static void main(String[] args) {

        String regex = "\\b(\\w+)(\\s+\\1\\b)+";
        Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);

        Scanner in = new Scanner(System.in);
        int numSentences = Integer.parseInt(in.nextLine());
        
        while (numSentences-- > 0) {
            String input = in.nextLine();
            
            Matcher m = p.matcher(input);
            
            // Check for subsequences of input that match the compiled pattern
            while (m.find()) {
                input = input.replaceAll(m.group(), m.group(1));
            }
            
            // Prints the modified sentence.
            System.out.println(input);
        }
        
        in.close();
    }
}

---------------------------------------------------------------------


//Valid Username Regular Expression
import java.util.Scanner;
class UsernameValidator {
    /*
     * Write regular expression here.
     */
    public static final String regularExpression = "[a-zA-Z]\\w{7,29}";
}


public class Solution {
    private static final Scanner scan = new Scanner(System.in);
    
    public static void main(String[] args) {
        int n = Integer.parseInt(scan.nextLine());
        while (n-- != 0) {
            String userName = scan.nextLine();

            if (userName.matches(UsernameValidator.regularExpression)) {
                System.out.println("Valid");
            } else {
                System.out.println("Invalid");
            }           
        }
    }
}




------------------------------------------------



//Tag Content Extractor

	public static void main(String[] args){
	 String regex = "<([^<>]+)>([^<>]+)</\\1>";
      Pattern pattern = Pattern.compile(regex);
      
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());
      
      while(testCases-->0){
          
         String line = in.nextLine();
         Matcher m = pattern.matcher(line);
         int count = 0;
         
         while (m.find()) {
             System.out.println(m.group(2));
             count++;
         }
         if (count == 0) {
         System.out.println("None");
         
         }
        }
      }

