//Java Varargs 
import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;


class Add {
    
    public void  add (int... s){
        String str= "";
        int sum = 0;
        
        for(int i = 0; i < s.length; i++) {
            sum += s[i];
            str+=s[i];
            
            if(i != s.length-1){

                str+="+";
            }
        }
        System.out.println(str+"="+sum);
}
}


public class Solution {

    public static void main(String[] args) {
       try{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			int n1=Integer.parseInt(br.readLine());
			int n2=Integer.parseInt(br.readLine());
			int n3=Integer.parseInt(br.readLine());
			int n4=Integer.parseInt(br.readLine());
			int n5=Integer.parseInt(br.readLine());
			int n6=Integer.parseInt(br.readLine());
			Add ob=new Add();
			ob.add(n1,n2);
			ob.add(n1,n2,n3);
			ob.add(n1,n2,n3,n4,n5);	
			ob.add(n1,n2,n3,n4,n5,n6);
			Method[] methods=Add.class.getDeclaredMethods();
			Set<String> set=new HashSet<>();
			boolean overload=false;
			for(int i=0;i<methods.length;i++)
			{
				if(set.contains(methods[i].getName()))
				{
					overload=true;
					break;
				}
				set.add(methods[i].getName());
				
			}
			if(overload)
			{
				throw new Exception("Overloading not allowed");
			}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		
	
	

}





-------------------------------------------------------





//Can You Access?
import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import java.util.regex.*;
import java.security.*;


public class Solution {

	public static void main(String[] args) throws Exception {
		DoNotTerminate.forbidExit();	

		try{
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
			int num = Integer.parseInt(br.readLine().trim());
			Object o;// Must be used to hold the reference of the instance of the class Solution.Inner.Private


        Inner inner = new Inner();
        o = inner.new Private();
        
        Inner.Private in = inner.new Private();
        String s = in.powerof2(num);
        
        System.out.println(num + " is " + s);
        

		System.out.println("An instance of class: " + o.getClass().getCanonicalName() + " has been created");
		
		}//end of try
		
		catch (DoNotTerminate.ExitTrappedException e) {
			System.out.println("Unsuccessful Termination!!");
		}
	}//end of main
	static class Inner{
		private class Private{
			private String powerof2(int num){
				return ((num&num-1)==0)?"power of 2":"not a power of 2";
			}
		}
	}//end of Inner
	
}//end of Solution

class DoNotTerminate { //This class prevents exit(0)
	 
    public static class ExitTrappedException extends SecurityException {

		private static final long serialVersionUID = 1L;
    }
 
    public static void forbidExit() {
        final SecurityManager securityManager = new SecurityManager() {
            @Override
            public void checkPermission(Permission permission) {
                if (permission.getName().contains("exitVM")) {
                    throw new ExitTrappedException();
                }
            }
        };
        System.setSecurityManager(securityManager);
    }
}	





-------------------------------------------------------




//Java Factory Pattern

import java.util.*;
import java.security.*;
interface Food {
	 public String getType();
	}
	class Pizza implements Food {
	 public String getType() {
	 return "Someone ordered a Fast Food!";
	 }
	}

	class Cake implements Food {

	 public String getType() {
	 return "Someone ordered a Dessert!";
	 }
	}
	class FoodFactory {
		public Food getFood(String order) {

     
     if ("cake".equals(order)){
         return new Cake();
     } 
      if ("pizza".equals(order)){
         return new Pizza();
     } 
     
return null;
}//End of getFood method

	}//End of factory class

	public class Solution {

	 public static void main(String args[]){
			Do_Not_Terminate.forbidExit();

		try{

			Scanner sc=new Scanner(System.in);
			//creating the factory
			FoodFactory foodFactory = new FoodFactory();
	
			//factory instantiates an object
			Food food = foodFactory.getFood(sc.nextLine());
	
			
			System.out.println("The factory returned "+food.getClass());
			System.out.println(food.getType());
		}
		catch (Do_Not_Terminate.ExitTrappedException e) {
			System.out.println("Unsuccessful Termination!!");
		}
	 }

	}
	class Do_Not_Terminate {
		 
	    public static class ExitTrappedException extends SecurityException {

			private static final long serialVersionUID = 1L;
	    }
	 
	    public static void forbidExit() {
	        final SecurityManager securityManager = new SecurityManager() {
	            @Override
	            public void checkPermission(Permission permission) {
	                if (permission.getName().contains("exitVM")) {
	                    throw new ExitTrappedException();
	                }
	            }
	        };
	        System.setSecurityManager(securityManager);
	    }
	}	
		



-----------------------------------------





//Java Singleton Pattern
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.lang.reflect.*;


class Singleton{
    
    private static Singleton instance;
    public String str;
    
    private Singleton (){}
    
    
    static Singleton getSingleInstance(){
        if (instance == null)
        instance = new Singleton();
        
        return instance;
    }

}





------------------------------





// Java Reflection
     import java.lang.reflect.*;
    import java.util.*;

    class Student{
        private String name;
        private String id;
        private String email;

        public void ahqym(){}
public void amftc(){}
public void anotherfunction(){}
public void atcks(){}
public void bwkbd(){}
public void cfwyc(){}
public void cmkxa(){}
public void dnpym(){}
public void dnqvo(){}
public void dvvwq(){}
public void ehjdm(){}
public void elyed(){}
public void fmyce(){}
public void getEmail(){}
public void getId(){}
public void getName(){}
public void ghtlj(){}
public void hluvb(){}
public void isqdf(){}
public void iwhtf(){}
public void jmopy(){}
public void jnskt(){}
public void kbjlt(){}
public void kgwku(){}
public void khuag(){}
public void levtp(){}
public void mcgme(){}
public void migyc(){}
public void moebl(){}
public void nixhb(){}
public void odyqp(){}
public void ogvdl(){}
public void ormim(){}
public void piwro(){}
public void plaob(){}
public void pnruo(){}
public void pqfct(){}
public void ptrup(){}
public void pvgyp(){}
public void qthde(){}
public void rmjig(){}
public void setEmail(){}
public void setId(){}
public void setName(){}
public void sumvl(){}
public void tkbpp(){}
public void tntpj(){}
public void toxdp(){}
public void twyfa(){}
public void uccfq(){}
public void ujxei(){}
public void vhxoi(){}
public void viwuu(){}
public void viyog(){}
public void whjtj(){}
public void ytijy(){}
    }

    class Solution {

        public static void main(String[] args){
            
            Class student = Student.class;
            Method[] methods = student.getDeclaredMethods();

            ArrayList<String> methodList = new ArrayList<>();
            for(Method x : methods){
                methodList.add(x.getName());
            }
            
            Collections.sort(methodList);
            
            for(String name: methodList){
                System.out.println(name);
            }
        }

    }

    
    
    
    
    
    -------------------------------
    
    
    
    
    DA CHIEDERE
    per l'input, per esempio doppio 2
    
    
    //Prime checker 
    
    import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
      
      Scanner sc = new Scanner(System.in);


      String s = "";
         
      while(sc.hasNext()){
          
  int num = sc.nextInt();

          if (num % 2 == 1 && num != 1|| num == 2){
                  s += " " + num;
                           System.out.println(s);

          } 
      }
    } 
}




-----------------------------------------------------------


//Java Annotations

import java.lang.annotation.*;
import java.lang.reflect.*;
import java.util.*;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface FamilyBudget {
	String userRole() default "GUEST";
	int budgetLimit() default 100;
}

class FamilyMember {
    
	@FamilyBudget (userRole = "SENIOR", budgetLimit = 100)
	public void seniorMember(int budget, int moneySpend) {
		System.out.println("Senior Member");
		System.out.println("Spend: " + moneySpend);
		System.out.println("Budget Left: " + (budget - moneySpend));
	}

@FamilyBudget (userRole = "JUNIOR", budgetLimit = 50)	
public void juniorUser(int budget, int moneySpend) {
		System.out.println("Junior Member");
		System.out.println("Spend: " + moneySpend);
		System.out.println("Budget Left: " + (budget - moneySpend));
	}
}

public class Solution {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int testCases = Integer.parseInt(in.nextLine());
		while (testCases > 0) {
			String role = in.next();
			int spend = in.nextInt();
			try {
				Class annotatedClass = FamilyMember.class;
				Method[] methods = annotatedClass.getMethods();
				for (Method method : methods) {
					if (method.isAnnotationPresent(FamilyBudget.class)) {
						FamilyBudget family = method
								.getAnnotation(FamilyBudget.class);
						String userRole = family.userRole();
						int budgetLimit = family.budgetLimit();
						if (userRole.equals(role)) {
							if(budgetLimit >= spend){
								method.invoke(FamilyMember.class.newInstance(),
										budgetLimit, spend);
							}else{
								System.out.println("Budget Limit Over");
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			testCases--;
		}
	}
}



-------------------------------------------------




//Covariant Return Types

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


//Complete the classes below
class Flower {
    
        public String whatsYourName(){
            return "I have many names and types";
        };

}

class Jasmine extends Flower{
    
    @Override
       public String whatsYourName(){
            return "Jasmine";
        };
}

class Lily extends Flower{
    
        @Override
       public String whatsYourName(){
            return "Lily";
        };
}

class Region {

       public Flower yourNationalFlower(){
            return new Flower();
        };
}

class WestBengal extends Region{
    
    @Override
    public Flower yourNationalFlower(){
            return new Jasmine();
        };
}

class AndhraPradesh extends Region{
        @Override

    public Flower yourNationalFlower(){
            return new Lily();
        };
}


public class Solution {
  public static void main(String[] args) throws IOException {
      BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
      String s = reader.readLine().trim();
      Region region = null;
      switch (s) {
        case "WestBengal":
          region = new WestBengal();
          break;
        case "AndhraPradesh":
          region = new AndhraPradesh();
          break;
      }
      Flower flower = region.yourNationalFlower();
      System.out.println(flower.whatsYourName());
    }
}




----------------------------------------------------




//
