import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

import java.util.ArrayList;
import java.util.Scanner;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
}


abstract class TreeVis{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}


class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}



class SumInLeavesVisitor extends TreeVis {
    int sum = 0;
    
    public int getResult() {
        return sum;
    }

    public void visitNode(TreeNode node) {
    }

    public void visitLeaf(TreeLeaf leaf) {
         sum += leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {
    int prod = 1;
    
    public int getResult() {
        return prod;
    }

    public void visitNode(TreeNode node) {
         if (node.getColor() == Color.RED){
             prod = (prod + node.getValue()) % 1000000007;
         }
    }

    public void visitLeaf(TreeLeaf leaf) {
        if (leaf.getColor() == Color.RED){
             prod = (prod + leaf.getValue()) % 1000000007;
         }
    }
}

class FancyVisitor extends TreeVis {
   
    int sumGreen = 0;
    int sumNode = 0;

    
    public int getResult() {
        return Math.abs(sumGreen - sumNode);
    }

    public void visitNode(TreeNode node) {
        if (node.getDepth() % 2 == 0)
        sumNode += node.getValue();
    }

    public void visitLeaf(TreeLeaf leaf) {
         if (leaf.getColor() == Color.GREEN){
             sumGreen += leaf.getValue();
         }
    }
}

public class Solution {
  
    public static Tree solve() {
        //read the tree from STDIN and return its root as a return value of this function
        
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        
        for (int i = 0; i < length; i++) {
            
        }
        
    }


    public static void main(String[] args) {
          Tree root = solve();
          
          SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
          
          ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
          
          FancyVisitor vis3 = new FancyVisitor();

          root.accept(vis1);
          root.accept(vis2);
          root.accept(vis3);

          int res1 = vis1.getResult();
          int res2 = vis2.getResult();
          int res3 = vis3.getResult();

          System.out.println(res1);
         System.out.println(res2);
        System.out.println(res3);
    }
}
